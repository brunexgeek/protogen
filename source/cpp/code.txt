--- CODE_HEADER
/*
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * For more information, please refer to <http://unlicense.org>
 */

// AUTO-GENERATED FILE. DO NOT EDIT!
// Generated by the protogen $1$ <https://github.com/brunexgeek/protogen>
// Source: $2$

#ifndef $3$
#define $3$

#include <string>
#include <stdint.h>
#include <iterator>
#include <sstream>
#include <iostream>
#include <vector>
#include <list>
#include <utility>
#include <stdexcept>
#include <forward_list>
------


--- CODE_JSON_MODEL
namespace protogen$10$ {
template<> struct json<$1$>
{
    static int read( json_context &ctx, $1$ &value ) { return read_object(ctx, value); }
    static int read_field( json_context &ctx, const std::string &name, $1$ &value ) \
    {
        (void)ctx;
        (void)value;
        int index = field_index(name);
        if (index < 0) return PGR_NIL;
        ctx.mask |= (1 << index);
        switch (index) {
$2$            default: return PGR_NIL;
        }
    }
    static int write( json_context &ctx, const $1$ &value )
    {
        #define PG_SIF(field_name, field_label) \
            if (!protogen$10$::json<decltype(value.field_name)>::empty(value.field_name)) \
            { \
                if (!first) (*ctx.os) <<  ','; \
                first = false; \
                (*ctx.os) <<  '\"' << field_label << "\":"; \
                protogen$10$::json<decltype(value.field_name)>::write(ctx, value.field_name); \
            }
        (void)value;
        bool first = true;
        (*ctx.os) << '{';
$3$        (*ctx.os) << '}';
        (void)first;
        return PGR_OK;
        #undef PG_SIF
    }
    static bool empty( const $1$ &value )
    {
        (void)value;
        return
$4$        true;
    }
    static void clear( $1$ &value )
    {
        (void)value;
$5$    }
    static bool equal( const $1$ &a, const $1$ &b )
    {
        (void)a; (void)b;
        return
$6$        true;
    }
    static void swap( $1$ &a, $1$ &b )
    {
        (void)a; (void)b;
$7$    }
    static bool is_missing( json_context &ctx )
    {
        std::string name;
$8$        return false;
        ctx.tok->error(PGERR_MISSING_FIELD, std::string("Missing field '") + name + "'");
        return true;
    }
    static int field_index( const std::string &name )
    {
$9$        (void) temp;
        return -1;
    }
};}
------

--- CODE_FIELD_INDEX
        if (temp == $1$) return $2$;
------

--- CODE_DESERIALIZE_IF
            case $2$: return protogen$4$::json<decltype(value.$1$)>::read(ctx, value.$1$);
------

--- CODE_SERIALIZE_IF
        PG_SIF($1$, $2$);
------

--- CODE_EMPTY_IF
        json<decltype(value.$1$)>::empty(value.$1$) &&
------

--- CODE_CLEAR_CALL
        json<decltype(value.$1$)>::clear(value.$1$);
------

--- CODE_EQUAL_IF
        json<decltype(a.$1$)>::equal(a.$1$, b.$1$) &&
------

--- CODE_SWAP_CALL
        json<decltype(a.$1$)>::swap(a.$1$, b.$1$);
------

--- CODE_IS_MISSING_IF
        if (!(ctx.mask & $2$)) { name = $1$; } else
------

--- CODE_ENTITY
PG$3$_ENTITY($1$,$2$,protogen$3$::json<$2$>)
------

--- CODE_ENTITY_JSON
PG$3$_ENTITY_SERIALIZER($1$,$2$,protogen$3$::json<$2$>)
------
