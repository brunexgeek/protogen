--- CODE_HEADER
/*
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * For more information, please refer to <http://unlicense.org>
 */

// AUTO-GENERATED FILE. DO NOT EDIT!
// Generated by the protogen $1$ <https://github.com/brunexgeek/protogen>
// Source: $2$

#ifndef $3$
#define $3$

#include <string>
#include <stdint.h>
#include <iterator>
#include <sstream>
#include <iostream>
#include <vector>
#include <list>
#include <utility>
#include <stdexcept>
#include <forward_list>
------

--- CODE_JSON_MODEL__HEADER
namespace protogen$1$ {
template<> struct json<$2$>
{
    static int read( json_context &ctx, $2$ &value ) { return read_object(ctx, value); }
------

--- CODE_JSON_MODEL__FOOTER
};
} // protogen$1$
------


--- CODE_JSON__READ_FIELD__EMPTY
    static int read_field( json_context &ctx, const std::string &name, $1$ &value )
    {
        (void) ctx; (void) name; (void) value;
        return PGR_NIL;
    }
------

--- CODE_JSON__READ_FIELD__HEADER
    static int read_field( json_context &ctx, const std::string &name, $1$ &value )
    {
        int idx = index(name);
        if (idx < 0) return PGR_NIL;
        switch (idx) {
------

--- CODE_JSON__READ_FIELD__ITEM
            case $1$: return json<decltype(value.$2$)>::read(ctx, value.$2$);
------

--- CODE_JSON__READ_FIELD__FOOTER
            default: return PGR_NIL;
        }
    }
------


--- CODE_JSON__WRITE__EMPTY
    static int write( json_context &ctx, const $1$ &value )
    {
        (void) value;
        (*ctx.os) << "{}";
        return PGR_OK;
    }
------

--- CODE_JSON__WRITE__HEADER
    static int write( json_context &ctx, const $1$ &value )
    {
        bool f = true;
        (*ctx.os) << '{';
------

--- CODE_JSON__WRITE__ITEM
        if (ctx.params.serialize_null || !json<decltype(value.$1$)>::null(value.$1$)) { (*ctx.os) << (f?"\"":",\"") << $2$ << "\":"; json<decltype(value.$1$)>::write(ctx, value.$1$); f=false; }
------

--- CODE_JSON__WRITE__FOOTER
        (*ctx.os) << '}';
        return PGR_OK;
    }
------


--- CODE_JSON__EMPTY__EMPTY
    static bool null( const $1$ &value ) { (void) value; return true; }
------

--- CODE_JSON__EMPTY__HEADER
    static bool null( const $1$ &value )
    {
        return
------

--- CODE_JSON__EMPTY__ITEM
            json<decltype(value.$1$)>::null(value.$1$) &&
------

--- CODE_JSON__EMPTY__FOOTER
            true;
    }
------


--- CODE_JSON__CLEAR__EMPTY
    static void clear( $1$ &value ) { (void) value; }
------

--- CODE_JSON__CLEAR__HEADER
    static void clear( $1$ &value )
    {
------

--- CODE_JSON__CLEAR__ITEM
        json<decltype(value.$1$)>::clear(value.$1$);
------

--- CODE_JSON__CLEAR__FOOTER
    }
------


--- CODE_JSON__EQUAL__EMPTY
    static bool equal( const $1$ &a, const $1$ &b ) { (void) a; (void) b; return true; }
------

--- CODE_JSON__EQUAL__HEADER
    static bool equal( const $1$ &a, const $1$ &b )
    {
        return
------

--- CODE_JSON__EQUAL__ITEM
            json<decltype(a.$1$)>::equal(a.$1$, b.$1$) &&
------

--- CODE_JSON__EQUAL__FOOTER
            true;
    }
------


--- CODE_JSON__SWAP__EMPTY
    static void swap( $1$ &a, $1$ &b ) { (void) a; (void) b; }
------

--- CODE_JSON__SWAP__HEADER
    static void swap( $1$ &a, $1$ &b )
    {
------

--- CODE_JSON__SWAP__ITEM
        json<decltype(a.$1$)>::swap(a.$1$, b.$1$);
------

--- CODE_JSON__SWAP__FOOTER
    }
------


--- CODE_JSON__IS_MISSING__EMPTY
    static bool is_missing( json_context &ctx ) { (void) ctx; return false; }
------

--- CODE_JSON__IS_MISSING__HEADER
    static bool is_missing( json_context &ctx )
    {
        std::string name;
------

--- CODE_JSON__IS_MISSING__ITEM
        if (!(ctx.mask & $2$)) { name = $1$; } else
------

--- CODE_JSON__IS_MISSING__FOOTER
        return false;
        ctx.tok->error(PGERR_MISSING_FIELD, std::string("Missing field '") + name + "'");
        return true;

    }
------


--- CODE_JSON__INDEX__EMPTY
    static int index( const std::string &name ) { (void) name; return -1; }
------

--- CODE_JSON__INDEX__HEADER
    static int index( const std::string &name )
    {
        const std::string &temp = name;
        static const std::unordered_map<std::string, int> FIELDS = {
------

--- CODE_JSON__INDEX__HEADER_OBF
    static int index( const std::string &name )
    {
        std::string temp = reveal(name);
        static const std::unordered_map<std::string, int> FIELDS = {
------

--- CODE_JSON__INDEX__ITEM
            {"$1$", $2$},
------

--- CODE_JSON__INDEX__FOOTER
        };
        auto it = FIELDS.find(temp);
        return (it == FIELDS.end()) ? -1 : it->second;
    }
------

--- CODE_ENTITY
PG$3$_ENTITY($1$,$2$,protogen$3$::json<$2$>)
------

--- CODE_ENTITY_JSON
PG$3$_ENTITY_SERIALIZER($1$,$2$,protogen$3$::json<$2$>)
------
