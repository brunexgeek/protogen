--- CODE_HEADER
/*
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * For more information, please refer to <http://unlicense.org>
 */

// AUTO-GENERATED FILE. DO NOT EDIT!
// Generated by the protogen $1$ compiler <https://github.com/brunexgeek/protogen>
// Source: $2$

#ifndef $3$
#define $3$

#include <string>
#include <stdint.h>
#include <iterator>
#include <sstream>
#include <iostream>
#include <vector>
#include <list>
#include <utility>
#include <stdexcept>
#include <forward_list>

#ifndef PROTOGEN_$4$
    #error Missing include of protogen $1$ header
#endif

#undef PROTOGEN_NS
#define PROTOGEN_NS protogen_$4$

------


--- CODE_JSON_MODEL
template<> struct protogen_2_0_0::json<$1$>
{
    static int read( json_context &ctx, $1$ &value )
    {
        return read_object(ctx, value);
    }
    static int read_field( json_context &ctx, const std::string &name, $1$ &value ) \
    {
$2$        return PGR_NIL;
    }
    static void write( json_context &ctx, const $1$ &value )
    {
        bool first = true;
        (*ctx.os) << '{';
$3$
        (*ctx.os) << '}';
    }
    static bool empty( const $1$ &value )
    {
$4$        return true;
    }
    static void clear( $1$ &value )
    {
$5$    }
    static bool equal( const $1$ &a, const $1$ &b )
    {
$6$        return true;
    }
    static void swap( $1$ &a, $1$ &b )
    {
$7$    }
    static bool is_missing( json_context &ctx )
    {
        static const auto CODE = PGERR_MISSING_FIELD;
        std::string name;
$8$        return false;
        ctx.tok->error(CODE, std::string("Missing field '") + name + "'");
        return true;
    }
};
------

--- CODE_DESERIALIZE_IF
        if (name == $2$) {
            int result = protogen_2_0_0::json<decltype(value.$1$)>::read(ctx, value.$1$);
            if (result == PGR_OK) ctx.mask |= $3$;
            return result;
        } else
------

--- CODE_SERIALIZE_IF
        if (!protogen_2_0_0::json<decltype(value.$1$)>::empty(value.$1$))
        {
            if (!first) (*ctx.os) << ',';
            first = false;
            (*ctx.os) << '\"' << $2$ << "\":";
            protogen_2_0_0::json<decltype(value.$1$)>::write(ctx, value.$1$);
        }
------

--- CODE_EMPTY_IF
        if (!protogen_2_0_0::json<decltype(value.$1$)>::empty(value.$1$)) return false;
------

--- CODE_CLEAR_CALL
        protogen_2_0_0::json<decltype(value.$1$)>::clear(value.$1$);
------

--- CODE_EQUAL_IF
        if (!protogen_2_0_0::json<decltype(a.$1$)>::equal(a.$1$, b.$1$)) return false;
------

--- CODE_SWAP_CALL
        protogen_2_0_0::json<decltype(a.$1$)>::swap(a.$1$, b.$1$);
------

--- CODE_IS_MISSING_IF
        if (!(ctx.mask & $2$)) { name = $1$; } else
------

--- CODE_ENTITY
PG_ENTITY($1$,$2$,protogen_2_0_0::json<$2$>)
------

--- CODE_ENTITY_JSON
PG_ENTITY_SERIALIZER($1$,$2$,protogen_2_0_0::json<$2$>)
------
